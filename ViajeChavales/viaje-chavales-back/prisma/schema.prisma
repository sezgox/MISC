// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username String @id
  password String
  profilePicture String
  trips Trip[]
  comments Comment[]
  freeDays FreeDays[]
  participates Participant[]
  group Group @relation(fields: [groupId], references: [id])
  groupId String
  messages ChatMessage[]
}

model Trip {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [username])
  userId String
  destination String
  details String?
  price Int?
  accomodation String?
  startDate DateTime
  endDate DateTime
  comments Comment[]
  participants Participant[]
}

model Comment {
  id Int @id @default(autoincrement())
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId Int
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)
  userId String
  comment String
}

model Participant {
  user User @relation(fields: [userId], references: [username], onDelete: Cascade)
  userId String
  trip Trip @relation(fields: [tripId], references: [id], onDelete: Cascade)
  tripId Int
  @@id([userId, tripId])
}

model FreeDays{
  user User @relation(fields: [username], references: [username])
  username String
  startDate DateTime
  endDate DateTime
  id Int @id @default(autoincrement())
}

model Group {
  id String @id
  name String
  members User[]
  messages ChatMessage[]
}

model ChatMessage {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [username])
  userId String
  message String
  chatId String
  group Group @relation(fields: [chatId], references: [id])
  date DateTime @default(now())
}